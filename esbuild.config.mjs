import builtins from "builtin-modules";
import esbuild from "esbuild";
import { solidPlugin } from "esbuild-plugin-solid";
import { copyFileSync } from "fs";
import process from "process";

const banner = `
/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const isProd = (process.argv[2] === "production");

const nodeEnv = process.env.NODE_ENV || (isProd ? "production" : "development");

const context = await esbuild.context({
	entryPoints: ["main.ts"],
	outfile: isProd ? "dist/main.js" : "main.js",
	bundle: true,
	treeShaking: true,
	minify: isProd,
	sourcemap: isProd ? false : "inline",
	logLevel: isProd ? "warning" : "info",
	format: "cjs",
	target: ["chrome138", "node22.16"], // Electron 37
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins
	],
	banner: {
		js: banner,
	},
	plugins: [
		solidPlugin(),
	],
	// https://github.com/amoutonbrady/esbuild-plugin-solid/blob/main/README.md
	// Solid uses conditional exports to provide different builds for development and production environments.
	// These configurations ensure that Solid can properly determine the build environment and provide the appropriate optimizations and development tools.
	define: {
		"process.env.NODE_ENV": JSON.stringify(nodeEnv),
	},
	conditions: [nodeEnv],
});

if (isProd) {
	await context.rebuild();
	await esbuild.build({
		entryPoints: ["styles.css"],
		outfile: "dist/styles.css",
		bundle: true,
		minify: true,
	});
	copyFileSync("manifest.json", "dist/manifest.json");
	process.exit(0);
} else {
	await context.watch();
}